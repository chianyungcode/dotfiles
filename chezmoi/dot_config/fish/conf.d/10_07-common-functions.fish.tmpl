# ███████╗██╗   ██╗███╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗███████╗
# ██╔════╝██║   ██║████╗  ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝
# █████╗  ██║   ██║██╔██╗ ██║██║        ██║   ██║██║   ██║██╔██╗ ██║███████╗
# ██╔══╝  ██║   ██║██║╚██╗██║██║        ██║   ██║██║   ██║██║╚██╗██║╚════██║
# ██║     ╚██████╔╝██║ ╚████║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║███████║
# ╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝

function fish_title
    set -q argv[1]; or set argv fish
    echo (set -lx fish_prompt_pwd_dir_length 1; prompt_pwd): $argv
end

function gen_completion
    # DESC: Generate completion for zsh and fish shell
    # USAGE: gen_completion "<cli_command_to_generate_completions>" "<cli_name>"

    set base_cmd $argv[1]   # arg1: base command, e.g. 'proto completions --shell'
    set filename $argv[2]   # arg2: completion file name without extension

    set dest_zsh ~/.local/share/chezmoi/chezmoi/dot_config/zsh-source/completions/_$filename
    set dest_fish ~/.local/share/chezmoi/chezmoi/dot_config/fish/completions/$filename.fish

    $base_cmd zsh  > $dest_zsh
    $base_cmd fish > $dest_fish

    echo "Generated:"
    echo "  Zsh  -> $dest_zsh"
    echo "  Fish -> $dest_fish"
end

function ff
    # Find file under the current directory
    find . -name $argv[1]
end

function ffs
    # Find file whose name starts with a given string
    find . -name "$argv[1]*"
end

function ffe
    # Find file whose name ends with a given string
    find . -name "*$argv[1]"
end

function path
    string split : $PATH
end

function fpath
    string split : $FPATH
end

function upabbr
    echo "Resetting zsh-abbr..."
    rm -rfv ~/.config/zsh-abbr
    if command -q abbr
        echo "Importing aliases..."
        abbr import-aliases
    else
        echo "Warning: 'abbr' command not found. Skipping import."
    end
    echo "Reset complete. Reloading shell now..."
    exec fish
end

function alias-select
    set buffer (alias | fzf \
        --prompt="Select Alias > " \
        --preview="string split -m1 '=' {} | string sub -s 2 | string trim" \
        --preview-window=right:50%:wrap \
        | string replace -r '^alias ' '')
    commandline --replace $buffer
end

bind \ce alias-select

# Bind ke Ctrl+E
bind \ce alias-select

function mkcd
    if test -d $argv[1]
        echo "It already exists! cd to the directory."
        cd $argv[1]
    else
        mkdir -p $argv[1]; cd $argv[1]
    end
end

function mcd
    mkdir -pv $argv[1]
    cd $argv[1]
end

function su
    if test (count $argv) -eq 0
        sudo (history | tail -n1 | string trim)
    else
        sudo $argv
    end
end

function sshlist
    awk '$1 ~ /Host$/ {for (i=2; i<=NF; i++) print $i}' ~/.ssh/config
end

function explain
    if test (count $argv) -eq 0
        while read -P "Command: " cmd
            curl -Gs "https://www.mankier.com/api/explain/?cols="(tput cols) --data-urlencode "q=$cmd"
        end
        echo "Bye!"
    else
        curl -Gs "https://www.mankier.com/api/explain/?cols="(tput cols) --data-urlencode "q=$argv"
    end
end

function md5Check
    set md5 $argv[1]
    set file $argv[2]
    if not command -q md5sum
        echo "Can not find 'md5sum' utility"
        return 1
    end
    if not test -e $file
        echo "Can not find $file"
        return 1
    end
    set filemd5 (md5sum $file | awk '{ print $1 }')
    if test $filemd5 = $md5
        echo "The two md5 hashes match"
    else
        echo "The two md5 hashes do not match"
    end
end

function myip
    set options "icanhazip (Default gateway)" "AWS (Default gateway)" "ipify (VPN)" "ipecho (Bypass VPN)" "Quit"
    for i in (seq (count $options))
        echo "$i) $options[$i]"
    end
    read -P "Enter a number: " choice
    switch $choice
        case 1
            curl -s https://icanhazip.com
        case 2
            curl -s https://checkip.amazonaws.com
        case 3
            curl -s https://api.ipify.org
        case 4
            curl -s https://ipecho.net/plain
        case 5
            return
        case '*'
            echo "Invalid option"
    end
end

function buf
    set filename $argv[1]
    set filetime (date +%Y%m%d_%H%M%S)
    cp -a $filename "{$filename}_$filetime"
end

function chgext
    for f in *.$argv[1]
        mv $f (string replace ".$argv[1]" ".$argv[2]" $f)
    end
end

function escape
    printf "%s" "$argv" | sed 's/[]\.|$(){}?+*^]/\\&/g'
end

function htmldecode
    set sedLocation "{{ .xdgDataDir }}/sed/htmlDecode.sed"
    if test -f $sedLocation
        echo $argv[1] | sed -f $sedLocation
    else
        echo "error. Could not find sed translation file"
    end
end

function htmlencode
    set sedLocation "{{ .xdgDataDir }}/sed/htmlEncode.sed"
    if test -f $sedLocation
        echo $argv[1] | sed -f $sedLocation
    else
        echo "error. Could not find sed translation file"
    end
end

function urlencode
    set length (string length -- $argv[1])
    for i in (seq 1 $length)
        set c (string sub -s $i -l 1 -- $argv[1])
        switch $c
            case [a-zA-Z0-9.~_-]
                printf "%s" "$c"
            case '*'
                printf '%%%02X' (printf "%d" "'$c")
        end
    end
end

alias urldecode='python3 -c "import sys, urllib.parse as ul; print(ul.unquote_plus(sys.argv[1]))"'
