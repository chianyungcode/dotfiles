# ████████╗███╗   ███╗██╗   ██╗██╗  ██╗
# ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝
#    ██║   ██╔████╔██║██║   ██║ ╚███╔╝
#    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗
#    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗
#    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝
# Terminal multiplexer
# https://github.com/tmux/tmux
# https://man7.org/linux/man-pages/man1/tmux.1.html#top_of_page

# === KEYBINDINGS ===
# 'bind' alias for 'bind-key'

# Change send-prefix keybind
unbind C-b
set -g prefix C-a
bind-key C-a send-prefix # or bind-key -T prefix C-a send-prefix

# Bind r for reload tmux config
bind r source-file ~/.dotfiles/tmux/tmux.conf \; display-message "Config reloaded"

# Changing keybind for splitting horizontal & vertical split view
unbind %
bind | split-window -c '#{pane_current_path}' -h # or 'tmux split-window -h -c "$(tmux display -p "#{pane_current_path}")"'
unbind '"'
bind - split-window -c '#{pane_current_path}' -v # or 'tmux split-window -v -c "$(tmux display -p "#{pane_current_path}")"'

# When creating new window the current path will be same as where we in current path
bind c new-window -c '#{pane_current_path}'

# Pane and Window close without confirmation
unbind x
bind -N "Close pane without confirmation" -T prefix x kill-pane # skip "kill-pane 1? (y/n)" prompt (cmd+w)
unbind &
bind -N "Close window without confirmation" -T prefix & kill-window

# Set arrow to move between panes to hjkl because it's similar to vim navigation
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# --- RUN A CLI TOOL e.g sesh,lazygit,bun ---
bind-key "T" run-shell "sesh connect \"$(
  sesh list --icons | fzf-tmux -p 80%,70% \
    --no-sort --ansi --border-label ' sesh ' --prompt '⚡  ' \
    --header '  ^a all ^t tmux ^g configs ^x zoxide ^d tmux kill ^f find' \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-a:change-prompt(⚡  )+reload(sesh list --icons)' \
    --bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t --icons)' \
    --bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z --icons)' \
    --bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡  )+reload(sesh list --icons)' \
    --preview-window 'right:55%' \
    --preview 'sesh preview {}'
)\""
bind -N "Control+g (root mode) lazygit" -T root C-g new-window -c "#{pane_current_path}" -n "🌳" "lazygit 2> /dev/null"
bind -N "Run last sessions" -T prefix L run-shell "sesh last || tmux display-message -d 1000 'Oops, no last sessions found'"
# bind -N "Run a script" Y split-window -v -l 10 "sleep 2 && bun run $(jq -r '.scripts | keys[]' package.json | fzf)"
bind -N "Control-d (root mode) lazydocker" -T prefix C-d new-window -c "#{pane_current_path}" -n "🐳" "lazydocker 2> /dev/null"
# bind -N "Run Yazi" -T root C-y new-window -c "#{pane_current_path}" -n "📁" "yazi"
bind -N "Run btop" -T root C-m new-window -c "#{pane_current_path}" -n "📈" "btop"


# --- Add capabilites to copy and paste in mode: copy-mode-vi ---
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind P paste-buffer
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# === BASIC SETTINGS ===
# 'set' alias for 'set-option' and 'setw' alias for 'set-window-option'

# set -g default-shell /opt/homebrew/bin/fish
set-window-option -g mode-keys vi # set window option to vi 
set -g detach-on-destroy off # don't exit from tmux when closing a session
set -g renumber-windows on   # renumber all windows when any window is closed
set -g base-index 1 # Set base index for windows
set -g pane-base-index 1 # Set base index for panes
set -g mouse on # Enable mouse support
set -g default-terminal "xterm-256color" # 'xterm-256color' is widely used by terminal emulator but you can change to 'tmux-256color' is specifically designed for tmux and is optimized for use within tmux sessions.
set-option -ga terminal-overrides ",xterm-256color:Tc"
set-option -g allow-rename off # Allow programs in the pane to change the window name a terminal escape sequence (\ek...\e\\).
# set-option -g automatic-rename off # Control automatic window renaming.  When this setting enabled, tmux will rename the window automatically the format specified by automatic-rename-format.
set -gq allow-passthrough on

# --- Define colour scheme --- #
_tmux_white=colour15
_tmux_black=colour232
_tmux_red=colour1
_tmux_purple=colour54
_tmux_grey_l=colour145
_tmux_grey_d=colour236
_tmux_blue=colour5
_tmux_blue_d=colour17
# ---------------------------- #

# Panes
set -g pane-active-border-style "fg=$_tmux_blue"
set -g message-style "fg=$_tmux_grey_l,bg=$_tmux_grey_d"
set -g pane-border-style "fg=white"
set -g display-panes-colour "black"
set -g display-panes-active-colour "white"

set -g pane-border-status "off"
set -g pane-border-format "[#[fg=white]#{?pane_active,#[bold],} :#P: #T #[fg=default,nobold]]"

# Auto hide pane-border-status line when only one pane is displayed (see tmux/tmux#566)
set-hook -g 'after-new-session'  'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_panes} -gt 1 ]; then tmux set pane-border-status top; fi"'

# === PLUGINS ===
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'omerxx/tmux-sessionx'
set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'navahas/tmux-buoyshell' # https://github.com/navahas/tmux-buoyshell
# set -g @plugin 'tmux-plugins/tmux-net-speed'
# set -g @plugin 'kylepeeler/tmux-nightowl'


# -> Custom config for tmux plugin 'navahas/tmux-buoyshell' <-
# set-option -g @buoyshell-title ' buoyshell '
# set-option -g @buoyshell-height '40%'
# set-option -g @buoyshell-width '20%'
# set-option -g @buoyshell-x 'W'
# set-option -g @buoyshell-y 'P'

# -> Custom config for tmux plugin 'omerxx/tmux-sessionx' <-
# I recommend using `o` if not already in use, for least key strokes when launching
set -g @sessionx-bind 'o'

# -> Custom config for tmux plugin 'tmux-resurrect' and 'tmux-continuum' <-
# set -g @resurrect-processes 'lazygit'
# set -g @resurrect-processes-debug 'on' # Debugging resurrect 
# set -g @continuum-restore 'on' # Auto restore when starting tmux without pressing <prefix>+<C+r>

# -> Custom config for tmux plugin 'catppuccin' <-
# set -g @catppuccin_flavor "mocha"
# set -g @catppuccin_window_status_style "rounded"
# # So when renaming a window, the renamed window name appears in the window's tab bar. This only relates to catppuccin's behavior
# set -g @catppuccin_window_default_text " #W"
# set -g @catppuccin_window_current_text " #W"
# set -g @catppuccin_window_text " #W"

# Load catppuccin
# run ~/.config/tmux/plugins/catppuccin/tmux/catppuccin.tmux
# For TPM, instead use `run ~/.config/tmux/plugins/tmux/catppuccin.tmux`

set -g status-left " session: #[fg=yellow,bold]#S " 
set -g status-right "#[fg=white,nobold]#(gitmux -cfg $HOME/.config/tmux/gitmux.yml)"
set -g status-left-length 300    # increase length (from 10)
set -g status-position top       # macOS / darwin style
set -g status-style 'bg=default' # transparent
set -g status-interval 1  # Refresh the status line every second

set -g window-status-format ' #[fg=gray]#I:#W'
set -g window-status-current-format ' #[fg=yellow]#I:#W'


# Uncomment this if want go back to catppuccin theme
# set -g status-right-length 100
# set -g status-left-length 100
# set -g status-left ""
# set -g status-right "#{E:@catppuccin_status_application}"
# set -agF status-right "#{E:@catppuccin_status_cpu}"
# set -ag status-right "#{E:@catppuccin_status_session}"
# set -ag status-right "#{E:@catppuccin_status_uptime}"
# set -agF status-right "#{E:@catppuccin_status_battery}"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

