{{- if eq .chezmoi.os "darwin" -}}
#!/usr/bin/env bash

{{ template "shared_script_utils.bash" . }}

export HOMEBREW_NO_INSTALL_UPGRADE=TRUE
export HOMEBREW_CASK_OPTS="--appdir=/Applications"
export HOMEBREW_NO_INSTALL_CLEANUP=1

formulae=(
    {{ range $package := .packages.homebrew.common.formulae }}
    "{{ $package }}"
    {{ end }}

    {{ if .dev_computer }}
    {{ range $package := .packages.homebrew.dev_computer.formulae }}
    "{{ $package }}"
    {{ end }}
    {{ end }}

    {{ if .homelab_member }}
    {{ range $package := .packages.homebrew.homelab_member.formulae }}
    "{{ $package }}"
    {{ end }}
    {{ end }}

    {{ if .personal_computer }}
    {{ range $package := .packages.homebrew.personal_computer.formulae }}
    "{{ $package }}"
    {{ end }}
    {{ end }}
)

casks=(
    {{ range $package := .packages.homebrew.common.casks }}
    "{{ $package }}"
    {{ end }}

    {{ if .dev_computer }}
    {{ range $package := .packages.homebrew.dev_computer.casks }}
    "{{ $package }}"
    {{ end }}
    {{ end }}

    {{ if .homelab_member }}
    {{ range $package := .packages.homebrew.homelab_member.casks }}
    "{{ $package }}"
    {{ end }}
    {{ end }}

    {{ if .personal_computer }}
    {{ range $package := .packages.homebrew.personal_computer.casks }}
    "{{ $package }}"
    {{ end }}
    {{ end }}
)

currently_installed_formulae=($(brew list --formula -1))
currently_installed_casks=($(brew list --cask -1))

header "Install Homebrew packages"

brew update

BREW_DIR="$(brew --prefix)/bin/"

for formula in ${formulae[@]}; do
    if ! _inArray_ -i "${formula}" "${currently_installed_formulae[@]}"; then
        if [[ ! -e "${BREW_DIR}/${formula}" ]]; then
            brew install -q --formula ${formula}
        fi

        # https://github.com/microsoft/Git-Credential-Manager-for-Mac-and-Linux/blob/master/Install.md
        if [[ ${formula} == "git-credential-manager" ]]; then
            git-credential-manager install
        fi

    fi
done

{{ if not .is_ci_workflow }}
for cask in ${casks[@]}; do
    if ! _inArray_ -i "${cask}" "${currently_installed_casks[@]}"; then
        # Check if app already exists in /Applications to prevent conflicts
        app_name="${cask}"
        
        # Check if there's a manual mapping for this cask
        {{ range $cask_key, $app_name_value := .manual_apps }}
        if [[ "${cask}" == "{{ $cask_key }}" ]]; then
            app_name="{{ $app_name_value }}"
        fi
        {{ end }}
        
        # If no manual mapping found, use default transformation
        if [[ "${app_name}" == "${cask}" ]]; then
            # Capitalize first letter and replace dashes with spaces
            app_name=$(echo "${cask}" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
        fi
        
        # Check if app exists in /Applications
        if [[ ! -d "/Applications/${app_name}.app" ]]; then
            brew install -q --cask ${cask}
        else
            notice "Skipping ${cask} - already exists in /Applications and installed manual, not via homebrew"
            continue
        fi
    fi

done
{{ end }}

success "Homebrew packages installed"

_safeExit_

{{- end }}
